---
import imageUrlBuilder from '@sanity/image-url';
import type { SanityImageSource } from '@sanity/image-url/lib/types/types';
import { getPosts } from '~/sanity/queries';
import { client } from '~/sanity/client';
import {
  CountryShape,
  Credits,
  Heading,
  PortableText,
  PostTeaser,
} from '~/components';
import PageLayout from '~/layouts/PageLayout.astro';

const imageBuilder = imageUrlBuilder(client).format('webp');

// @TODO: Refactor to use `astro-sanity-picture`.
function urlFor(source: SanityImageSource, size: number): string {
  return imageBuilder.image(source).width(size).height(size).url();
}

export async function getStaticPaths() {
  const posts = await getPosts();
  return posts.map((posts) => ({
    params: { slug: posts.slug },
    props: posts,
  }));
}

const post = Astro.props as Post;

let invocations = 1;
const fadeInAnimation = () => {
  const delay = `${invocations++ * 250}ms`;
  const duration = '750ms';
  const animation = {
    old: {
      name: 'fadeIn',
      delay,
      duration,
      easing: 'linear',
      fillMode: 'forwards',
    },
    new: {
      name: 'fadeIn',
      delay,
      duration,
      easing: 'linear',
      fillMode: 'backwards',
    },
  };
  return {
    forwards: animation,
    backwards: animation,
  };
};

const firstAnimation = fadeInAnimation();

const author = post?.credits?.find((credit) => credit.type === 'author');

const schema = {
  '@context': 'https://schema.org',
  '@type': 'BlogPosting',
  mainEntityOfPage: `https://manhole.design/posts/${post.slug}`,
  headline: post.title,
  name: post.title,
  description: post.summaryHTML,
  datePublished: post._createdAt.substring(0, 10),
  ...(post._updatedAt &&
    post._createdAt !== post._createdAt && {
      dateModified: post._updatedAt.substring(0, 10),
    }),
  ...(author && {
    author: {
      '@type': 'Person',
      name: author?.person?.fullName,
      url: author?.person?.website,
    },
  }),
  ...(post.mainImage && {
    image: {
      '@type': 'ImageObject',
      '@id': urlFor(post.mainImage, 1000),
      url: urlFor(post.mainImage, 1000),
      height: '1000',
      width: '1000',
    },
  }),
  url: `https://manhole.design/posts/${post.slug}`,
  isPartOf: {
    '@type': 'Blog',
    '@id': 'https://manhole.gallery/',
    name: 'Manhole · Gallery',
    publisher: {
      '@type': 'Organization',
      '@id': 'https://manhole.gallery/',
      name: 'Manhole · Gallery',
    },
  },
};

const country = post?.locations?.find(
  (location) => location.type === 'country'
) as Country;
---

<PageLayout
  meta={{
    title: `${post.title} | Manhole Gallery`,
    description: post?.metaDescription,
    image:
      post.mainImage &&
      imageBuilder.image(post.mainImage).width(1600).height(900).url(),
  }}
>
  <article class="grid sm:grid-cols-2 gap-y-8 mb-16 max-w-[125rem] mx-auto">
    <div>
      {
        post?.mainImage && (
          <figure class="relative max-w-full h-auto">
            <img
              alt={post.mainImage?.alt || ''}
              title={post.mainImage?.alt}
              class="max-w-full h-auto object-cover bg-gray-100 aspect-square"
              srcset={[
                `${urlFor(post.mainImage, 480)} 480w`,
                `${urlFor(post.mainImage, 768)} 768w`,
                `${urlFor(post.mainImage, 1000)} 1000w`,
              ].join(', ')}
              sizes="(max-width: 639px) 100vw, (max-width: 1999px) 50vw, 62.5rem"
              src={urlFor(post.mainImage, 768)}
              width="1000"
              height="1000"
              transition:name={`post_${post._id}_image`}
            />
            {country && country?.countryCode && (
              <CountryShape
                countryCode={country.countryCode}
                size="sm"
                class="absolute top-4 left-4 drop-shadow-heavy"
                transition:animate={firstAnimation}
                transition:name={`country_${country._id}`}
              />
            )}
          </figure>
        )
      }
    </div>

    <div class="space-y-4 px-4 sm:px-8 md:px-12 lg:px-16">
      <Heading
        as="h1"
        transition:animate={firstAnimation}
        transition:name={`post_${post._id}_title`}
      >
        {post.title}
      </Heading>

      {
        post?.locations && (
          <p
            class="flex gap-3 flex-wrap text-lg"
            transition:animate={fadeInAnimation()}
            transition:name={`post_${post._id}_locations`}
          >
            <span class="sr-only">Locations:</span>
            {post.locations.map((location) =>
              location.type === 'country' ? (
                <a href={`/country/${location.slug}`} class="link">
                  {location.name}
                </a>
              ) : (
                <span>{location.name}</span>
              )
            )}
          </p>
        )
      }

      {
        (post?.body || post?.summary) && (
          <div
            class="max-w-[40ch] lg:py-4"
            transition:animate={fadeInAnimation()}
            transition:name={`post_${post._id}_description`}
          >
            <PortableText value={post.body || post.summary} components={{}} />
          </div>
        )
      }

      {
        post?.credits && post.credits.length > 0 && (
          <Credits
            credits={post.credits}
            transition:animate={fadeInAnimation()}
            transition:name={`post_${post._id}_credits`}
          />
        )
      }
    </div>
  </article>

  {
    post?.morePosts && post?.morePosts?.length > 0 && (
      <section class="container">
        <div class="mb-8 lg:mb-12 md:text-center">
          <Heading as="h2">More Posts</Heading>
        </div>
        <div class="grid grid-cols-1 xs:grid-cols-2 lg:grid-cols-3 align-top justify-start gap-4">
          {post.morePosts.map((post) => (
            <PostTeaser
              imageSizes="(max-width: 474px) 100vw, (max-width: 1023px) 50vw, 20.625rem"
              lazy
              post={post}
            />
          ))}
        </div>
      </section>
    )
  }

  <script type="application/ld+json" set:html={JSON.stringify(schema)} />
</PageLayout>
